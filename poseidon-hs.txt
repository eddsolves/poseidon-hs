-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A package with tools for working with Poseidon Genotype Data
--   
--   The tools in this package read and analyse Poseidon-formatted genotype
--   databases, a modular system for storing genotype data from thousands
--   of individuals.
@package poseidon-hs
@version 0.27.1

module Poseidon.MathHelpers

-- | A helper function to calculate the mean of a list of doubles
avg :: [Double] -> Double

-- | A helper function to round doubles
roundTo :: Int -> Double -> Double

-- | A helper function to print rounded doubles
roundToStr :: (PrintfArg a, Floating a) => Int -> a -> String

-- | A helper function to calculate the standard deviation of a list of
--   doubles
stdev :: [Double] -> Double

-- | A helper function to get a nice string with mean and sd for a list of
--   doubles
meanAndSdRoundTo :: Int -> [Double] -> String

-- | A helper function to get a nice string with mean and sd for a list of
--   doubles (here rounded to integer)
meanAndSdInteger :: [Double] -> String

module Poseidon.PoseidonVersion
validPoseidonVersions :: [PoseidonVersion]
showPoseidonVersion :: PoseidonVersion -> String
latestPoseidonVersion :: PoseidonVersion
asVersion :: PoseidonVersion -> Version
instance GHC.Classes.Ord Poseidon.PoseidonVersion.PoseidonVersion
instance GHC.Classes.Eq Poseidon.PoseidonVersion.PoseidonVersion
instance GHC.Show.Show Poseidon.PoseidonVersion.PoseidonVersion

module Poseidon.SecondaryTypes
poseidonVersionParser :: Parser Version

-- | A data type to represent a contributor
data ContributorSpec
ContributorSpec :: String -> String -> ContributorSpec

-- | the name of a contributor ^ the email address of a contributor
[contributorName] :: ContributorSpec -> String

-- | the email address of a contributor
[contributorEmail] :: ContributorSpec -> String
contributorSpecParser :: Parser [ContributorSpec]
data IndividualInfo
IndividualInfo :: String -> [String] -> String -> IndividualInfo
[indInfoName] :: IndividualInfo -> String
[indInfoGroups] :: IndividualInfo -> [String]
[indInfoPacName] :: IndividualInfo -> String
data GroupInfo
GroupInfo :: String -> [String] -> Int -> GroupInfo
[gName] :: GroupInfo -> String
[gPackageNames] :: GroupInfo -> [String]
[gNrIndividuals] :: GroupInfo -> Int
data VersionComponent
Major :: VersionComponent
Minor :: VersionComponent
Patch :: VersionComponent

-- | Minimal package representation on Poseidon servers
data PackageInfo
PackageInfo :: String -> Maybe Version -> Maybe String -> Maybe Day -> Int -> PackageInfo
[pTitle] :: PackageInfo -> String
[pVersion] :: PackageInfo -> Maybe Version
[pDescription] :: PackageInfo -> Maybe String
[pLastModified] :: PackageInfo -> Maybe Day
[pNrIndividuals] :: PackageInfo -> Int

-- | The most general way to run a parser over the Identity monad.
--   <tt>runParser p state filePath input</tt> runs parser <tt>p</tt> on
--   the input list of tokens <tt>input</tt>, obtained from source
--   <tt>filePath</tt> with the initial user state <tt>st</tt>. The
--   <tt>filePath</tt> is only used in error messages and may be the empty
--   string. Returns either a <a>ParseError</a> (<a>Left</a>) or a value of
--   type <tt>a</tt> (<a>Right</a>).
--   
--   <pre>
--   parseFromFile p fname
--     = do{ input &lt;- readFile fname
--         ; return (runParser p () fname input)
--         }
--   </pre>
runParser :: Stream s Identity t => Parsec s u a -> u -> SourceName -> s -> Either ParseError a
instance GHC.Show.Show Poseidon.SecondaryTypes.VersionComponent
instance GHC.Show.Show Poseidon.SecondaryTypes.PackageInfo
instance GHC.Classes.Eq Poseidon.SecondaryTypes.ContributorSpec
instance GHC.Show.Show Poseidon.SecondaryTypes.ContributorSpec
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.SecondaryTypes.ContributorSpec
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.SecondaryTypes.ContributorSpec
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.SecondaryTypes.GroupInfo
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.SecondaryTypes.GroupInfo
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.SecondaryTypes.PackageInfo
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.SecondaryTypes.PackageInfo
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.SecondaryTypes.IndividualInfo
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.SecondaryTypes.IndividualInfo

module Poseidon.Utils

-- | A Poseidon Exception data type with several concrete constructors
data PoseidonException

-- | An exception to represent YAML parsing errors
PoseidonYamlParseException :: FilePath -> ParseException -> PoseidonException

-- | An exception to represent a logical error in a package
PoseidonPackageException :: String -> PoseidonException

-- | An exception to represent an issue with a package version
PoseidonPackageVersionException :: FilePath -> String -> PoseidonException

-- | An exception to indicate a missing poseidonVersion field
PoseidonPackageMissingVersionException :: FilePath -> PoseidonException

-- | An exception to represent an error when searching for individuals or
--   populations
PoseidonIndSearchException :: String -> PoseidonException

-- | An exception to represent errors when trying to parse the genotype
--   data
PoseidonGenotypeException :: String -> PoseidonException

-- | An exception to represent errors when trying to parse the .janno file
PoseidonJannoRowException :: FilePath -> Int -> String -> PoseidonException

-- | An exception to represent within-janno consistency errors
PoseidonJannoConsistencyException :: FilePath -> String -> PoseidonException

-- | An exception to represent inconsistencies across multiple files in a
--   package
PoseidonCrossFileConsistencyException :: String -> String -> PoseidonException

-- | An exception to represent logical issues in a poseidon package
--   Collection
PoseidonCollectionException :: String -> PoseidonException

-- | An exception to represent missing files
PoseidonFileExistenceException :: FilePath -> PoseidonException

-- | An exception to represent failed checksum tests
PoseidonFileChecksumException :: FilePath -> PoseidonException

-- | An exception type to represent FStat specification errors
PoseidonFStatsFormatException :: String -> PoseidonException

-- | An exception to represent errors when trying to parse the .bib file
PoseidonBibTeXException :: FilePath -> String -> PoseidonException

-- | An exception to indicate failed entity parsing
PoseidonPoseidonEntityParsingException :: String -> PoseidonException

-- | An exception to indicate issues in the forge selection
PoseidonForgeEntitiesException :: String -> PoseidonException

-- | An exception to throw if there is nothing to be forged
PoseidonEmptyForgeException :: PoseidonException

-- | An exception to indicate an issue in newPackageTemplate
PoseidonNewPackageConstructionException :: String -> PoseidonException

-- | An exception to indicate failed remote info JSON parsing
PoseidonRemoteJSONParsingException :: String -> PoseidonException

-- | A catch-all for any other type of exception
PoseidonGenericException :: String -> PoseidonException

-- | An exception to throw if the output package lacks a name
PoseidonEmptyOutPacNameException :: PoseidonException
renderPoseidonException :: PoseidonException -> String
instance GHC.Show.Show Poseidon.Utils.PoseidonException
instance GHC.Exception.Type.Exception Poseidon.Utils.PoseidonException

module Poseidon.Janno

-- | A data type to represent a sample/janno file row See
--   <a>https://github.com/poseidon-framework/poseidon2-schema/blob/master/janno_columns.tsv</a>
--   for more details
data JannoRow
JannoRow :: String -> Maybe JannoStringList -> Maybe JannoStringList -> Maybe JannoRelationDegreeList -> Maybe JannoStringList -> Maybe String -> Maybe String -> Maybe JannoStringList -> Maybe String -> Maybe String -> Maybe String -> Maybe Latitude -> Maybe Longitude -> Maybe JannoStringList -> Maybe JannoIntList -> Maybe JannoIntList -> Maybe Int -> Maybe Int -> Maybe Int -> Maybe JannoDateType -> Maybe String -> Maybe Int -> Maybe (JannoList JannoCaptureType) -> Maybe JannoGenotypePloidy -> JannoStringList -> JannoSex -> Maybe Int -> Maybe Double -> Maybe String -> Maybe String -> Maybe Percent -> Maybe JannoUDG -> Maybe JannoLibraryBuilt -> Maybe Percent -> Maybe JannoStringList -> Maybe JannoStringList -> Maybe JannoStringList -> Maybe String -> Maybe JannoStringList -> Maybe JURI -> Maybe String -> Maybe JannoStringList -> Maybe String -> Maybe JannoStringList -> JannoRow
[jPoseidonID] :: JannoRow -> String
[jAlternativeIDs] :: JannoRow -> Maybe JannoStringList
[jRelationTo] :: JannoRow -> Maybe JannoStringList
[jRelationDegree] :: JannoRow -> Maybe JannoRelationDegreeList
[jRelationType] :: JannoRow -> Maybe JannoStringList
[jRelationNote] :: JannoRow -> Maybe String
[jCollectionID] :: JannoRow -> Maybe String
[jSourceTissue] :: JannoRow -> Maybe JannoStringList
[jCountry] :: JannoRow -> Maybe String
[jLocation] :: JannoRow -> Maybe String
[jSite] :: JannoRow -> Maybe String
[jLatitude] :: JannoRow -> Maybe Latitude
[jLongitude] :: JannoRow -> Maybe Longitude
[jDateC14Labnr] :: JannoRow -> Maybe JannoStringList
[jDateC14UncalBP] :: JannoRow -> Maybe JannoIntList
[jDateC14UncalBPErr] :: JannoRow -> Maybe JannoIntList
[jDateBCADMedian] :: JannoRow -> Maybe Int
[jDateBCADStart] :: JannoRow -> Maybe Int
[jDateBCADStop] :: JannoRow -> Maybe Int
[jDateType] :: JannoRow -> Maybe JannoDateType
[jDateNote] :: JannoRow -> Maybe String
[jNrLibraries] :: JannoRow -> Maybe Int
[jCaptureType] :: JannoRow -> Maybe (JannoList JannoCaptureType)
[jGenotypePloidy] :: JannoRow -> Maybe JannoGenotypePloidy
[jGroupName] :: JannoRow -> JannoStringList
[jGeneticSex] :: JannoRow -> JannoSex
[jNrSNPs] :: JannoRow -> Maybe Int
[jCoverageOnTargets] :: JannoRow -> Maybe Double
[jMTHaplogroup] :: JannoRow -> Maybe String
[jYHaplogroup] :: JannoRow -> Maybe String
[jEndogenous] :: JannoRow -> Maybe Percent
[jUDG] :: JannoRow -> Maybe JannoUDG
[jLibraryBuilt] :: JannoRow -> Maybe JannoLibraryBuilt
[jDamage] :: JannoRow -> Maybe Percent
[jContamination] :: JannoRow -> Maybe JannoStringList
[jContaminationErr] :: JannoRow -> Maybe JannoStringList
[jContaminationMeas] :: JannoRow -> Maybe JannoStringList
[jContaminationNote] :: JannoRow -> Maybe String
[jGeneticSourceAccessionIDs] :: JannoRow -> Maybe JannoStringList
[jDataPreparationPipelineURL] :: JannoRow -> Maybe JURI
[jPrimaryContact] :: JannoRow -> Maybe String
[jPublication] :: JannoRow -> Maybe JannoStringList
[jComments] :: JannoRow -> Maybe String
[jKeywords] :: JannoRow -> Maybe JannoStringList
newtype JannoSex
JannoSex :: Sex -> JannoSex
[sfSex] :: JannoSex -> Sex

-- | A general datatype for janno list columns
newtype JannoList a
JannoList :: [a] -> JannoList a
[getJannoList] :: JannoList a -> [a]
data Sex
Male :: Sex
Female :: Sex
Unknown :: Sex

-- | A datatype for Latitudes
newtype Latitude
Latitude :: Double -> Latitude

-- | A datatype for Longitudes
newtype Longitude
Longitude :: Double -> Longitude

-- | A datatype to represent Date_Type in a janno file
data JannoDateType
C14 :: JannoDateType
Contextual :: JannoDateType
Modern :: JannoDateType

-- | A datatype to represent Capture_Type in a janno file
data JannoCaptureType
Shotgun :: JannoCaptureType
A1240K :: JannoCaptureType
OtherCapture :: JannoCaptureType
ReferenceGenome :: JannoCaptureType

-- | A datatype to represent Genotype_Ploidy in a janno file
data JannoGenotypePloidy
Diploid :: JannoGenotypePloidy
Haploid :: JannoGenotypePloidy

-- | A datatype for Percent values
newtype Percent
Percent :: Double -> Percent

-- | A datatype to represent UDG in a janno file
data JannoUDG
Minus :: JannoUDG
Half :: JannoUDG
Plus :: JannoUDG
Mixed :: JannoUDG

-- | A datatype to represent URIs in a janno file
newtype JURI
JURI :: String -> JURI
data RelationDegree
Identical :: RelationDegree
First :: RelationDegree
Second :: RelationDegree
ThirdToFifth :: RelationDegree
SixthToTenth :: RelationDegree
Unrelated :: RelationDegree
OtherDegree :: RelationDegree

-- | A datatype to represent Library_Built in a janno file
data JannoLibraryBuilt
DS :: JannoLibraryBuilt
SS :: JannoLibraryBuilt
Other :: JannoLibraryBuilt
writeJannoFile :: FilePath -> [JannoRow] -> IO ()

-- | A function to load one janno file
readJannoFile :: Bool -> FilePath -> IO [JannoRow]

-- | A function to create empty janno rows for a set of individuals
createMinimalJanno :: [EigenstratIndEntry] -> [JannoRow]
jannoHeaderString :: [String]
instance GHC.Classes.Eq Poseidon.Janno.JannoSex
instance GHC.Generics.Generic Poseidon.Janno.JannoDateType
instance GHC.Classes.Ord Poseidon.Janno.JannoDateType
instance GHC.Classes.Eq Poseidon.Janno.JannoDateType
instance GHC.Generics.Generic Poseidon.Janno.JannoCaptureType
instance GHC.Classes.Ord Poseidon.Janno.JannoCaptureType
instance GHC.Classes.Eq Poseidon.Janno.JannoCaptureType
instance GHC.Generics.Generic Poseidon.Janno.JannoGenotypePloidy
instance GHC.Classes.Ord Poseidon.Janno.JannoGenotypePloidy
instance GHC.Classes.Eq Poseidon.Janno.JannoGenotypePloidy
instance GHC.Generics.Generic Poseidon.Janno.JannoUDG
instance GHC.Classes.Ord Poseidon.Janno.JannoUDG
instance GHC.Classes.Eq Poseidon.Janno.JannoUDG
instance GHC.Generics.Generic Poseidon.Janno.JannoLibraryBuilt
instance GHC.Classes.Ord Poseidon.Janno.JannoLibraryBuilt
instance GHC.Classes.Eq Poseidon.Janno.JannoLibraryBuilt
instance GHC.Generics.Generic Poseidon.Janno.Latitude
instance GHC.Classes.Ord Poseidon.Janno.Latitude
instance GHC.Classes.Eq Poseidon.Janno.Latitude
instance GHC.Generics.Generic Poseidon.Janno.Longitude
instance GHC.Classes.Ord Poseidon.Janno.Longitude
instance GHC.Classes.Eq Poseidon.Janno.Longitude
instance GHC.Generics.Generic Poseidon.Janno.Percent
instance GHC.Classes.Ord Poseidon.Janno.Percent
instance GHC.Classes.Eq Poseidon.Janno.Percent
instance GHC.Generics.Generic Poseidon.Janno.JURI
instance GHC.Classes.Ord Poseidon.Janno.JURI
instance GHC.Classes.Eq Poseidon.Janno.JURI
instance GHC.Show.Show a => GHC.Show.Show (Poseidon.Janno.JannoList a)
instance GHC.Generics.Generic (Poseidon.Janno.JannoList a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Poseidon.Janno.JannoList a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Poseidon.Janno.JannoList a)
instance GHC.Generics.Generic Poseidon.Janno.RelationDegree
instance GHC.Classes.Ord Poseidon.Janno.RelationDegree
instance GHC.Classes.Eq Poseidon.Janno.RelationDegree
instance GHC.Generics.Generic Poseidon.Janno.JannoRow
instance GHC.Classes.Eq Poseidon.Janno.JannoRow
instance GHC.Show.Show Poseidon.Janno.JannoRow
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.JannoRow
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.JannoRow
instance Data.Csv.Conversion.FromNamedRecord Poseidon.Janno.JannoRow
instance Data.Csv.Conversion.ToNamedRecord Poseidon.Janno.JannoRow
instance Data.Csv.Conversion.DefaultOrdered Poseidon.Janno.JannoRow
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.RelationDegree
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.RelationDegree
instance Data.Csv.Conversion.FromField Poseidon.Janno.RelationDegree
instance Data.Csv.Conversion.ToField Poseidon.Janno.RelationDegree
instance GHC.Show.Show Poseidon.Janno.RelationDegree
instance Data.Csv.Conversion.ToField a => Data.Csv.Conversion.ToField (Poseidon.Janno.JannoList a)
instance Data.Csv.Conversion.FromField a => Data.Csv.Conversion.FromField (Poseidon.Janno.JannoList a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Poseidon.Janno.JannoList a)
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Poseidon.Janno.JannoList a)
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.JURI
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.JURI
instance Data.Csv.Conversion.FromField Poseidon.Janno.JURI
instance Data.Csv.Conversion.ToField Poseidon.Janno.JURI
instance GHC.Show.Show Poseidon.Janno.JURI
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.Percent
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.Percent
instance Data.Csv.Conversion.FromField Poseidon.Janno.Percent
instance Data.Csv.Conversion.ToField Poseidon.Janno.Percent
instance GHC.Show.Show Poseidon.Janno.Percent
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.Longitude
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.Longitude
instance Data.Csv.Conversion.FromField Poseidon.Janno.Longitude
instance Data.Csv.Conversion.ToField Poseidon.Janno.Longitude
instance GHC.Show.Show Poseidon.Janno.Longitude
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.Latitude
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.Latitude
instance Data.Csv.Conversion.FromField Poseidon.Janno.Latitude
instance Data.Csv.Conversion.ToField Poseidon.Janno.Latitude
instance GHC.Show.Show Poseidon.Janno.Latitude
instance Data.Csv.Conversion.FromField Poseidon.Janno.JannoLibraryBuilt
instance Data.Csv.Conversion.ToField Poseidon.Janno.JannoLibraryBuilt
instance GHC.Show.Show Poseidon.Janno.JannoLibraryBuilt
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.JannoLibraryBuilt
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.JannoLibraryBuilt
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.JannoUDG
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.JannoUDG
instance Data.Csv.Conversion.FromField Poseidon.Janno.JannoUDG
instance Data.Csv.Conversion.ToField Poseidon.Janno.JannoUDG
instance GHC.Show.Show Poseidon.Janno.JannoUDG
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.JannoGenotypePloidy
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.JannoGenotypePloidy
instance Data.Csv.Conversion.FromField Poseidon.Janno.JannoGenotypePloidy
instance Data.Csv.Conversion.ToField Poseidon.Janno.JannoGenotypePloidy
instance GHC.Show.Show Poseidon.Janno.JannoGenotypePloidy
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.JannoCaptureType
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.JannoCaptureType
instance Data.Csv.Conversion.FromField Poseidon.Janno.JannoCaptureType
instance Data.Csv.Conversion.ToField Poseidon.Janno.JannoCaptureType
instance GHC.Show.Show Poseidon.Janno.JannoCaptureType
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.JannoDateType
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.JannoDateType
instance Data.Csv.Conversion.FromField Poseidon.Janno.JannoDateType
instance Data.Csv.Conversion.ToField Poseidon.Janno.JannoDateType
instance GHC.Show.Show Poseidon.Janno.JannoDateType
instance GHC.Classes.Ord Poseidon.Janno.JannoSex
instance Data.Csv.Conversion.FromField Poseidon.Janno.JannoSex
instance Data.Csv.Conversion.ToField Poseidon.Janno.JannoSex
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Janno.JannoSex
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Janno.JannoSex
instance GHC.Show.Show Poseidon.Janno.JannoSex

module Poseidon.GenotypeData

-- | A datatype to specify genotype files
data GenotypeDataSpec
GenotypeDataSpec :: GenotypeFormatSpec -> FilePath -> Maybe String -> FilePath -> Maybe String -> FilePath -> Maybe String -> Maybe SNPSetSpec -> GenotypeDataSpec

-- | the genotype format
[format] :: GenotypeDataSpec -> GenotypeFormatSpec

-- | path to the geno file
[genoFile] :: GenotypeDataSpec -> FilePath

-- | the optional checksum for the geno file
[genoFileChkSum] :: GenotypeDataSpec -> Maybe String

-- | path to the snp file
[snpFile] :: GenotypeDataSpec -> FilePath

-- | the optional checksum for the Snp file
[snpFileChkSum] :: GenotypeDataSpec -> Maybe String

-- | path to the ind file
[indFile] :: GenotypeDataSpec -> FilePath

-- | the optional checksum for the indfile
[indFileChkSum] :: GenotypeDataSpec -> Maybe String

-- | the SNP set de facto listed in the genotype data
[snpSet] :: GenotypeDataSpec -> Maybe SNPSetSpec

-- | A data type representing the options fo the genotype format
data GenotypeFormatSpec
GenotypeFormatEigenstrat :: GenotypeFormatSpec
GenotypeFormatPlink :: GenotypeFormatSpec
data SNPSetSpec
SNPSet1240K :: SNPSetSpec
SNPSetHumanOrigins :: SNPSetSpec
SNPSetOther :: SNPSetSpec
snpSetMergeList :: [SNPSetSpec] -> Bool -> SNPSetSpec
snpSetMerge :: SNPSetSpec -> SNPSetSpec -> Bool -> SNPSetSpec

-- | A function to return a list of all individuals in the genotype files
--   of a package.
loadIndividuals :: FilePath -> GenotypeDataSpec -> IO [EigenstratIndEntry]

-- | A function to read the genotype data of a package
loadGenotypeData :: MonadSafe m => FilePath -> GenotypeDataSpec -> m ([EigenstratIndEntry], Producer (EigenstratSnpEntry, GenoLine) m ())
joinEntries :: MonadIO m => Bool -> [Int] -> [String] -> [Maybe (EigenstratSnpEntry, GenoLine)] -> m (EigenstratSnpEntry, GenoLine)
getConsensusSnpEntry :: MonadIO m => Bool -> [EigenstratSnpEntry] -> m EigenstratSnpEntry
recodeAlleles :: EigenstratSnpEntry -> EigenstratSnpEntry -> GenoLine -> Either String GenoLine
printSNPCopyProgress :: Pipe a a (SafeT IO) ()
selectIndices :: [Int] -> (EigenstratSnpEntry, GenoLine) -> (EigenstratSnpEntry, GenoLine)
instance GHC.Classes.Eq Poseidon.GenotypeData.GenotypeFormatSpec
instance GHC.Classes.Eq Poseidon.GenotypeData.SNPSetSpec
instance GHC.Classes.Eq Poseidon.GenotypeData.GenotypeDataSpec
instance GHC.Show.Show Poseidon.GenotypeData.GenotypeDataSpec
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.GenotypeData.GenotypeDataSpec
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.GenotypeData.GenotypeDataSpec
instance GHC.Show.Show Poseidon.GenotypeData.SNPSetSpec
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.GenotypeData.SNPSetSpec
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.GenotypeData.SNPSetSpec
instance GHC.Show.Show Poseidon.GenotypeData.GenotypeFormatSpec
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.GenotypeData.GenotypeFormatSpec
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.GenotypeData.GenotypeFormatSpec

module Poseidon.BibFile
dummyBibEntry :: BibEntry
readBibTeXFile :: FilePath -> IO BibTeX
writeBibTeXFile :: FilePath -> BibTeX -> IO ()
type BibTeX = [BibEntry]
data BibEntry
BibEntry :: String -> String -> [(String, String)] -> BibEntry
[bibEntryType] :: BibEntry -> String
[bibEntryId] :: BibEntry -> String
[bibEntryFields] :: BibEntry -> [(String, String)]
instance GHC.Classes.Eq Poseidon.BibFile.BibEntry
instance GHC.Show.Show Poseidon.BibFile.BibEntry

module Poseidon.Package

-- | Internal structure for YAML loading only
data PoseidonYamlStruct
PoseidonYamlStruct :: Version -> String -> Maybe String -> [ContributorSpec] -> Maybe Version -> Maybe Day -> GenotypeDataSpec -> Maybe FilePath -> Maybe String -> Maybe FilePath -> Maybe String -> Maybe FilePath -> Maybe FilePath -> PoseidonYamlStruct
[_posYamlPoseidonVersion] :: PoseidonYamlStruct -> Version
[_posYamlTitle] :: PoseidonYamlStruct -> String
[_posYamlDescription] :: PoseidonYamlStruct -> Maybe String
[_posYamlContributor] :: PoseidonYamlStruct -> [ContributorSpec]
[_posYamlPackageVersion] :: PoseidonYamlStruct -> Maybe Version
[_posYamlLastModified] :: PoseidonYamlStruct -> Maybe Day
[_posYamlGenotypeData] :: PoseidonYamlStruct -> GenotypeDataSpec
[_posYamlJannoFile] :: PoseidonYamlStruct -> Maybe FilePath
[_posYamlJannoFileChkSum] :: PoseidonYamlStruct -> Maybe String
[_posYamlBibFile] :: PoseidonYamlStruct -> Maybe FilePath
[_posYamlBibFileChkSum] :: PoseidonYamlStruct -> Maybe String
[_posYamlReadmeFile] :: PoseidonYamlStruct -> Maybe FilePath
[_posYamlChangelogFile] :: PoseidonYamlStruct -> Maybe FilePath

-- | A data type to represent a Poseidon Package
data PoseidonPackage
PoseidonPackage :: FilePath -> Version -> String -> Maybe String -> [ContributorSpec] -> Maybe Version -> Maybe Day -> GenotypeDataSpec -> Maybe FilePath -> [JannoRow] -> Maybe String -> Maybe FilePath -> BibTeX -> Maybe String -> Maybe FilePath -> Maybe FilePath -> Int -> PoseidonPackage

-- | the base directory of the YAML file
[posPacBaseDir] :: PoseidonPackage -> FilePath

-- | the version of the package
[posPacPoseidonVersion] :: PoseidonPackage -> Version

-- | the title of the package
[posPacTitle] :: PoseidonPackage -> String

-- | the optional description string of the package
[posPacDescription] :: PoseidonPackage -> Maybe String

-- | the contributor(s) of the package
[posPacContributor] :: PoseidonPackage -> [ContributorSpec]

-- | the optional version of the package
[posPacPackageVersion] :: PoseidonPackage -> Maybe Version

-- | the optional date of last update
[posPacLastModified] :: PoseidonPackage -> Maybe Day

-- | the paths to the genotype files
[posPacGenotypeData] :: PoseidonPackage -> GenotypeDataSpec

-- | the path to the janno file
[posPacJannoFile] :: PoseidonPackage -> Maybe FilePath

-- | the loaded janno file
[posPacJanno] :: PoseidonPackage -> [JannoRow]

-- | the optional jannofile checksum
[posPacJannoFileChkSum] :: PoseidonPackage -> Maybe String

-- | the path to the BibTeX file
[posPacBibFile] :: PoseidonPackage -> Maybe FilePath

-- | the loaded bibliography file
[posPacBib] :: PoseidonPackage -> BibTeX

-- | the optional bibfile chksum
[posPacBibFileChkSum] :: PoseidonPackage -> Maybe String

-- | the path to the README file
[posPacReadmeFile] :: PoseidonPackage -> Maybe FilePath

-- | the path to the CHANGELOG file
[posPacChangelogFile] :: PoseidonPackage -> Maybe FilePath

-- | how many packages of this name exist in the current collection
[posPacDuplicate] :: PoseidonPackage -> Int

-- | A Poseidon Exception data type with several concrete constructors
data PoseidonException

-- | An exception to represent YAML parsing errors
PoseidonYamlParseException :: FilePath -> ParseException -> PoseidonException

-- | An exception to represent a logical error in a package
PoseidonPackageException :: String -> PoseidonException

-- | An exception to represent an issue with a package version
PoseidonPackageVersionException :: FilePath -> String -> PoseidonException

-- | An exception to indicate a missing poseidonVersion field
PoseidonPackageMissingVersionException :: FilePath -> PoseidonException

-- | An exception to represent an error when searching for individuals or
--   populations
PoseidonIndSearchException :: String -> PoseidonException

-- | An exception to represent errors when trying to parse the genotype
--   data
PoseidonGenotypeException :: String -> PoseidonException

-- | An exception to represent errors when trying to parse the .janno file
PoseidonJannoRowException :: FilePath -> Int -> String -> PoseidonException

-- | An exception to represent within-janno consistency errors
PoseidonJannoConsistencyException :: FilePath -> String -> PoseidonException

-- | An exception to represent inconsistencies across multiple files in a
--   package
PoseidonCrossFileConsistencyException :: String -> String -> PoseidonException

-- | An exception to represent logical issues in a poseidon package
--   Collection
PoseidonCollectionException :: String -> PoseidonException

-- | An exception to represent missing files
PoseidonFileExistenceException :: FilePath -> PoseidonException

-- | An exception to represent failed checksum tests
PoseidonFileChecksumException :: FilePath -> PoseidonException

-- | An exception type to represent FStat specification errors
PoseidonFStatsFormatException :: String -> PoseidonException

-- | An exception to represent errors when trying to parse the .bib file
PoseidonBibTeXException :: FilePath -> String -> PoseidonException

-- | An exception to indicate failed entity parsing
PoseidonPoseidonEntityParsingException :: String -> PoseidonException

-- | An exception to indicate issues in the forge selection
PoseidonForgeEntitiesException :: String -> PoseidonException

-- | An exception to throw if there is nothing to be forged
PoseidonEmptyForgeException :: PoseidonException

-- | An exception to indicate an issue in newPackageTemplate
PoseidonNewPackageConstructionException :: String -> PoseidonException

-- | An exception to indicate failed remote info JSON parsing
PoseidonRemoteJSONParsingException :: String -> PoseidonException

-- | A catch-all for any other type of exception
PoseidonGenericException :: String -> PoseidonException

-- | An exception to throw if the output package lacks a name
PoseidonEmptyOutPacNameException :: PoseidonException
data PackageReadOptions
PackageReadOptions :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> PackageReadOptions

-- | whether to print verbose output
[_readOptVerbose] :: PackageReadOptions -> Bool

-- | whether to stop on duplicated individuals
[_readOptStopOnDuplicates] :: PackageReadOptions -> Bool

-- | whether to ignore all checksums
[_readOptIgnoreChecksums] :: PackageReadOptions -> Bool

-- | whether to ignore missing genotype files, useful for developer use
--   cases
[_readOptIgnoreGeno] :: PackageReadOptions -> Bool

-- | whether to check the first 100 SNPs of the genotypes
[_readOptGenoCheck] :: PackageReadOptions -> Bool

-- | whether to ignore the Poseidon version of an input package. This can
--   cause runtime errors, if the structural difference between versions is
--   too big. The option was added to allow trident update to load and
--   update packages with older version numbers. In a typical update
--   workflow one would adjust the package to the new Poseidon version and
--   then run update on the structurally already correct package.
[_readOptIgnorePosVersion] :: PackageReadOptions -> Bool

-- | A helper function to detect packages with duplicate names and select
--   the most up-to-date ones.
filterDuplicatePackages :: MonadThrow m => [PoseidonPackage] -> m [PoseidonPackage]
findAllPoseidonYmlFiles :: FilePath -> IO [FilePath]

-- | a utility function to load all poseidon packages found recursively in
--   multiple base directories. This also takes care of smart filtering and
--   duplication checks. Exceptions lead to skipping packages and
--   outputting warnings
readPoseidonPackageCollection :: PackageReadOptions -> [FilePath] -> IO [PoseidonPackage]
getChecksum :: FilePath -> IO String

-- | A function to read genotype data jointly from multiple packages
getJointGenotypeData :: MonadSafe m => Bool -> Bool -> [PoseidonPackage] -> Maybe FilePath -> m ([EigenstratIndEntry], Producer (EigenstratSnpEntry, GenoLine) m ())
getJointJanno :: [PoseidonPackage] -> [JannoRow]
getJointIndividualInfo :: [PoseidonPackage] -> [IndividualInfo]

-- | A function to create a minimal POSEIDON package
newMinimalPackageTemplate :: FilePath -> String -> GenotypeDataSpec -> PoseidonPackage

-- | A function to create a more complete POSEIDON package This will take
--   only the filenames of the provided files, so it assumes that the files
--   will be copied into the directory into which the YAML file will be
--   written
newPackageTemplate :: FilePath -> String -> GenotypeDataSpec -> Maybe (Either [EigenstratIndEntry] [JannoRow]) -> BibTeX -> IO PoseidonPackage
renderMismatch :: [String] -> [String] -> String
zipWithPadding :: a -> b -> [a] -> [b] -> [(a, b)]
writePoseidonPackage :: PoseidonPackage -> IO ()
defaultPackageReadOptions :: PackageReadOptions

-- | A function to read in a poseidon package from a YAML file. Note that
--   this function calls the addFullPaths function to make paths absolute.
readPoseidonPackage :: PackageReadOptions -> FilePath -> IO PoseidonPackage
instance GHC.Generics.Generic Poseidon.Package.PoseidonYamlStruct
instance GHC.Classes.Eq Poseidon.Package.PoseidonYamlStruct
instance GHC.Show.Show Poseidon.Package.PoseidonYamlStruct
instance GHC.Generics.Generic Poseidon.Package.PoseidonPackage
instance GHC.Classes.Eq Poseidon.Package.PoseidonPackage
instance GHC.Show.Show Poseidon.Package.PoseidonPackage
instance Data.Aeson.Types.FromJSON.FromJSON Poseidon.Package.PoseidonYamlStruct
instance Data.Aeson.Types.ToJSON.ToJSON Poseidon.Package.PoseidonYamlStruct
instance Data.Yaml.Pretty.Extras.ToPrettyYaml Poseidon.Package.PoseidonYamlStruct

module Poseidon.EntitiesList

-- | A datatype to represent a package, a group or an individual
data PoseidonEntity
Pac :: String -> PoseidonEntity
Group :: String -> PoseidonEntity
Ind :: String -> PoseidonEntity
data SignedEntity
Include :: PoseidonEntity -> SignedEntity
Exclude :: PoseidonEntity -> SignedEntity
type SignedEntitiesList = [SignedEntity]
type EntitiesList = [PoseidonEntity]
class EntitySpec a
indInfoConformsToEntitySpec :: EntitySpec a => [a] -> IndividualInfo -> Bool
underlyingEntity :: EntitySpec a => a -> PoseidonEntity
entitySpecParser :: EntitySpec a => Parser a
readEntitiesFromFile :: EntitySpec a => FilePath -> IO [a]
readEntitiesFromString :: EntitySpec a => String -> Either PoseidonException [a]
findNonExistentEntities :: EntitySpec a => [a] -> [IndividualInfo] -> EntitiesList
indInfoFindRelevantPackageNames :: EntitySpec a => [a] -> [IndividualInfo] -> [String]
filterRelevantPackages :: EntitySpec a => [a] -> [PoseidonPackage] -> [PoseidonPackage]
conformingEntityIndices :: EntitySpec a => [a] -> [IndividualInfo] -> [Int]
entitiesListP :: EntitySpec a => Parser [a]
instance GHC.Classes.Eq Poseidon.EntitiesList.PoseidonEntity
instance GHC.Classes.Eq Poseidon.EntitiesList.SignedEntity
instance Poseidon.EntitiesList.EntitySpec Poseidon.EntitiesList.SignedEntity
instance Poseidon.EntitiesList.EntitySpec Poseidon.EntitiesList.PoseidonEntity
instance GHC.Show.Show Poseidon.EntitiesList.SignedEntity
instance GHC.Show.Show Poseidon.EntitiesList.PoseidonEntity

module Poseidon.CLI.Validate

-- | A datatype representing command line options for the validate command
data ValidateOptions
ValidateOptions :: [FilePath] -> Bool -> Bool -> Bool -> ValidateOptions
[_validateBaseDirs] :: ValidateOptions -> [FilePath]
[_validateVerbose] :: ValidateOptions -> Bool
[_validateIgnoreGeno] :: ValidateOptions -> Bool
[_validateNoExitCode] :: ValidateOptions -> Bool
pacReadOpts :: PackageReadOptions
runValidate :: ValidateOptions -> IO ()

module Poseidon.CLI.Update
runUpdate :: UpdateOptions -> IO ()
data UpdateOptions
UpdateOptions :: [FilePath] -> Maybe Version -> Bool -> VersionComponent -> Bool -> Bool -> [ContributorSpec] -> String -> Bool -> UpdateOptions
[_updateBaseDirs] :: UpdateOptions -> [FilePath]
[_updatePoseidonVersion] :: UpdateOptions -> Maybe Version
[_updateIgnorePoseidonVersion] :: UpdateOptions -> Bool
[_updateVersionUpdate] :: UpdateOptions -> VersionComponent
[_updateNoChecksumUpdate] :: UpdateOptions -> Bool
[_updateIgnoreGeno] :: UpdateOptions -> Bool
[_updateNewContributors] :: UpdateOptions -> [ContributorSpec]
[_updateLog] :: UpdateOptions -> String
[_updateForce] :: UpdateOptions -> Bool

module Poseidon.CLI.Summarise

-- | A datatype representing command line options for the summarise command
data SummariseOptions
SummariseOptions :: [FilePath] -> Bool -> SummariseOptions
[_summariseBaseDirs] :: SummariseOptions -> [FilePath]
[_summariseRawOutput] :: SummariseOptions -> Bool
pacReadOpts :: PackageReadOptions

-- | The main function running the janno command
runSummarise :: SummariseOptions -> IO ()

-- | A function to print meaningful summary information for a list of
--   poseidon samples
summariseJannoRows :: [JannoRow] -> Bool -> IO ()

-- | A helper function to concat the first N elements of a string list in a
--   nice way
paste :: [String] -> String

-- | A helper function to determine the frequency of objects in a list
--   (similar to the table function in R)
frequency :: Ord a => [a] -> [(a, Int)]
sortTupelsBySndDesc :: (Ord a, Ord b) => (a, b) -> (a, b) -> Ordering

-- | A helper function to print the output of frequency nicely
printFrequency :: Show a => String -> [(a, Int)] -> String

-- | A helper function to print the output of frequency over Maybe values
--   nicely
printFrequencyMaybe :: Show a => String -> [(Maybe a, Int)] -> String

-- | A helper function to unwrap a maybe
maybeShow :: Show a => Maybe a -> String

-- | As printFrequency, but without additional quoting of strings
printFrequencyString :: String -> [(String, Int)] -> String

-- | As printFrequencyMaybe, but without additional quoting of strings
printFrequencyMaybeString :: String -> [(Maybe String, Int)] -> String

-- | As maybeShow, but without additional quoting of strings
maybeShowString :: Maybe String -> String

module Poseidon.CLI.List

-- | The main function running the list command
runList :: ListOptions -> IO ()

-- | A datatype representing command line options for the list command
data ListOptions
ListOptions :: RepoLocationSpec -> ListEntity -> Bool -> Bool -> ListOptions

-- | the list of base directories to search for packages
[_listRepoLocation] :: ListOptions -> RepoLocationSpec

-- | what to list
[_listListEntity] :: ListOptions -> ListEntity

-- | whether to output raw TSV instead of a nicely formatted table
[_listRawOutput] :: ListOptions -> Bool
[_listIgnoreGeno] :: ListOptions -> Bool

-- | A datatype to represent the options what to list
data ListEntity
ListPackages :: ListEntity
ListGroups :: ListEntity
ListIndividuals :: [String] -> ListEntity
data RepoLocationSpec
RepoLocal :: [FilePath] -> RepoLocationSpec
RepoRemote :: String -> RepoLocationSpec

module Poseidon.CLI.Genoconvert

-- | A datatype representing command line options for the validate command
data GenoconvertOptions
GenoconvertOptions :: [FilePath] -> GenotypeFormatSpec -> Bool -> GenoconvertOptions
[_genoconvertBaseDirs] :: GenoconvertOptions -> [FilePath]
[_genoConvertOutFormat] :: GenoconvertOptions -> GenotypeFormatSpec
[_genoconvertRemoveOld] :: GenoconvertOptions -> Bool
pacReadOpts :: PackageReadOptions
runGenoconvert :: GenoconvertOptions -> IO ()
convertGenoTo :: GenotypeFormatSpec -> Bool -> PoseidonPackage -> IO ()

module Poseidon.CLI.Fetch
data FetchOptions
FetchOptions :: [FilePath] -> EntitiesList -> [FilePath] -> String -> Bool -> Bool -> FetchOptions
[_jaBaseDirs] :: FetchOptions -> [FilePath]
[_entityList] :: FetchOptions -> EntitiesList
[_entityFiles] :: FetchOptions -> [FilePath]
[_remoteURL] :: FetchOptions -> String
[_upgrade] :: FetchOptions -> Bool
[_downloadAllPacs] :: FetchOptions -> Bool
data PackageState
NotLocal :: PackageState
EqualLocalRemote :: PackageState
LaterRemote :: PackageState
LaterLocal :: PackageState
pacReadOpts :: PackageReadOptions

-- | The main function running the Fetch command
runFetch :: FetchOptions -> IO ()
readServerIndInfo :: ByteString -> IO [IndividualInfo]
readServerPackageInfo :: ByteString -> IO [PackageInfo]
determinePackageState :: [PoseidonPackage] -> PackageInfo -> (PackageState, String, Maybe Version, Maybe Version)
handlePackageByState :: FilePath -> FilePath -> String -> Bool -> (PackageState, String, Maybe Version, Maybe Version) -> IO ()
printV :: Maybe Version -> String
downloadAndUnzipPackage :: FilePath -> FilePath -> String -> String -> IO ()
unzipPackage :: FilePath -> FilePath -> IO ()
downloadPackage :: FilePath -> String -> String -> IO ()
padString :: Int -> String -> String
printDownloadProgress :: Double -> ConduitT ByteString ByteString (ResourceT IO) ()

module Poseidon.CLI.Survey

-- | A datatype representing command line options for the survey command
data SurveyOptions
SurveyOptions :: [FilePath] -> Bool -> SurveyOptions
[_surveyBaseDirs] :: SurveyOptions -> [FilePath]
[_surveyRawOutput] :: SurveyOptions -> Bool
pacReadOpts :: PackageReadOptions

-- | The main function running the janno command
runSurvey :: SurveyOptions -> IO ()
extractFirst :: (a, b, c, d) -> a
renderPackageWithCompleteness :: (String, Bool, [JannoRow], BibTeX) -> String
renderJannoCompleteness :: [JannoRow] -> String

module Poseidon.CLI.Init
data InitOptions
InitOptions :: GenotypeFormatSpec -> SNPSetSpec -> FilePath -> FilePath -> FilePath -> FilePath -> Maybe String -> Bool -> InitOptions
[_initGenoFormat] :: InitOptions -> GenotypeFormatSpec
[_initGenoSnpSet] :: InitOptions -> SNPSetSpec
[_initGenoFile] :: InitOptions -> FilePath
[_initSnpFile] :: InitOptions -> FilePath
[_initIndFile] :: InitOptions -> FilePath
[_initPacPath] :: InitOptions -> FilePath
[_initPacName] :: InitOptions -> Maybe String
[_initMinimal] :: InitOptions -> Bool
runInit :: InitOptions -> IO ()

module Poseidon.CLI.Forge

-- | A datatype representing command line options for the survey command
data ForgeOptions
ForgeOptions :: [FilePath] -> Either SignedEntitiesList FilePath -> Bool -> FilePath -> Maybe String -> GenotypeFormatSpec -> Bool -> Bool -> Bool -> Maybe FilePath -> ForgeOptions
[_forgeBaseDirs] :: ForgeOptions -> [FilePath]
[_forgeEntitySpec] :: ForgeOptions -> Either SignedEntitiesList FilePath
[_forgeIntersect] :: ForgeOptions -> Bool
[_forgeOutPacPath] :: ForgeOptions -> FilePath
[_forgeOutPacName] :: ForgeOptions -> Maybe String
[_forgeOutFormat] :: ForgeOptions -> GenotypeFormatSpec
[_forgeOutMinimal] :: ForgeOptions -> Bool
[_forgeShowWarnings] :: ForgeOptions -> Bool
[_forgeNoExtract] :: ForgeOptions -> Bool
[_forgeSnpFile] :: ForgeOptions -> Maybe FilePath
pacReadOpts :: PackageReadOptions

-- | The main function running the forge command
runForge :: ForgeOptions -> IO ()
sumNonMissingSNPs :: IOVector Int -> (EigenstratSnpEntry, GenoLine) -> SafeT IO (IOVector Int)
checkIndividualsUniqueJanno :: [JannoRow] -> IO ()
filterBibEntries :: [JannoRow] -> BibTeX -> BibTeX
fillMissingSnpSets :: [PoseidonPackage] -> IO [SNPSetSpec]
